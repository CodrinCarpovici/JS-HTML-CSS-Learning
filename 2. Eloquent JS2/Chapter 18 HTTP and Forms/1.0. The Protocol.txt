If you type eloquentjavascript.net/18_http.html into your browser’s address 
bar, the browser first looks up the address of the server associated
with eloquentjavascript.net and tries to open a TCP connection to it
on port 80, the default port for HTTP traffic. If the server exists and
accepts the connection, the browser might send something like this:

GET /18_http.html HTTP/1.1
Host: eloquentjavascript.net
User-Agent: Your browser's name

The information sent by the client is called the request. It starts with
this line:
GET /18_http.html HTTP/1.1

The first word is the method of the request. GET means that we want to
get the specified resource. Other common methods are DELETE to delete
a resource, PUT to create or replace it, and POST to send information to
it. Note that the server is not obliged to carry out every request it gets.
If you walk up to a random website and tell it to DELETE its main page,
it’ll probably refuse.

After the resource path, the first line of the request mentions HTTP/1.1
to indicate the version of the HTTP protocol it is using.

In practice, many sites use HTTP version 2, which supports the same
concepts as version 1.1 but is a lot more complicated so that it can be
faster. Browsers will automatically switch to the appropriate protocol
version when talking to a given server, and the outcome of a request
is the same regardless of which version is used.

The server’s response will start with a version as well, followed by
the status of the response, first as a three-digit status code and then as
a human-readable string.
HTTP/1.1 200 OK

Status codes starting with a 2 indicate that the request succeeded.
Codes starting with 4 mean there was something wrong with the request. 
404 is probably the most famous HTTP status code—it means
that the resource could not be found. Codes that start with 5 mean an
error happened on the server and the request is not to blame.
The first line of a request or response may be followed by any number
of headers. These are lines in the form name: value that specify extra
information about the request or response. These headers were part of
the example response:

Content-Length: 65585
Content-Type: text/html
Last-Modified: Thu, 04 Jan 2018 14:05:30 GMT

This tells us the size and type of the response document. In this
case, it is an HTML document of 65,585 bytes. It also tells us when
that document was last modified.
For most headers, the client and server are free to decide whether
to include them in a request or response. But a few are required.
For example, the Host header, which specifies the hostname, should
be included in a request because a server might be serving multiple
hostnames on a single IP address, and without that header, the server
won’t know which hostname the client is trying to talk to.
After the headers, both requests and responses may include a blank
line followed by a body, which contains the data being sent. GET and
DELETE requests don’t send along any data, but PUT and POST requests do.
$ node hello.js
Hello world

The console.log method in Node does something similar to what it
does in the browser. It prints out a piece of text. But in Node, the
text will go to the process’s standard output stream, rather than to a
browser’s JavaScript console. When running node from the command
line, that means you see the logged values in your terminal.
If you run node without giving it a file, it provides you with a prompt
at which you can type JavaScript code and immediately see the result.

$ node
> 1 + 1
2
> [-1, -2, -3].map(Math.abs)
[1, 2, 3]
> process.exit(0)
$

The process binding, just like the console binding, is available globally 
in Node. It provides various ways to inspect and manipulate the
current program. The exit method ends the process and can be given
an exit status code, which tells the program that started node (in this
case, the command line shell) whether the program completed successfully 
(code zero) or encountered an error (any other code).
To find the command line arguments given to your script, you can
read process.argv, which is an array of strings. Note that it also includes 
the name of the node command and your script name, so the
actual arguments start at index 2. If showargv.js contains the statement 
console.log(process.argv), you could run it like this:

$ node showargv.js one --and two
["node", "/tmp/showargv.js", "one", "--and", "two"]

All the standard JavaScript global bindings, such as Array, Math, and
JSON, are also present in Node’s environment. Browser-related functionality, 
such as document or prompt, is not.
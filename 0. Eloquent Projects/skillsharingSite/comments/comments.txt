There is a server part to this project, written for Node.js, and a client
part, written for the browser. The server stores the system’s data and
provides it to the client. It also serves the files that implement the
client-side system.
The server keeps the list of talks proposed for the next meeting, and
the client shows this list. Each talk has a presenter name, a title, a 
summary, and an array of comments associated with it. The client allows
users to propose new talks (adding them to the list), delete talks, and
comment on existing talks. Whenever the user makes such a change,
the client makes an HTTP request to tell the server about it.

The application will be set up to show a live view of the current
proposed talks and their comments. Whenever someone, somewhere,
submits a new talk or adds a comment, all people who have the page
open in their browsers should immediately see the change. This poses a
bit of a challenge—there is no way for a web server to open a connection
to a client, nor is there a good way to know which clients are currently
looking at a given website.
A common solution to this problem is called long polling, which happens 
to be one of the motivations for Node’s design.

router.js
The module exports the Router class. A router object allows new
handlers to be registered with the add method and can resolve requests
with its resolve method.
The latter will return a response when a handler was found, and null
otherwise. It tries the routes one at a time (in the order in which they
were defined) until a matching one is found.
The handler functions are called with the context value (which will
be the server instance in our case), match strings for any groups they
defined in their regular expression, and the request object. The strings
have to be URL-decoded since the raw URL may contain %20-style
codes.

skillsharing_server.js
The ecstatic package exports a
function that can be called with a configuration object to produce a
request handler function. We use the root option to tell the server
where it should look for files. The handler function accepts request
and response parameters and can be passed directly to createServer
to create a server that serves only files. We want to first check for 
requests that we should handle specially, though, so we wrap it in another
function.
The talks that have been proposed are stored in the talks property of
the server, an object whose property names are the talk titles. These
will be exposed as HTTP resources under /talks/[title], so we need
to add handlers to our router that implement the various methods that
clients can use to work with them.
The handler for requests that GET a single talk must look up the
talk and respond either with the talk’s JSON data or with a 404 error
response.
To retrieve the content of a request body, we define a function called
readStream, which reads all content from a readable stream and returns
a promise that resolves to a string
One handler that needs to read request bodies is the PUT handler,
which is used to create new talks. It has to check whether the data it
was given has presenter and summary properties, which are strings. Any
data coming from outside the system might be nonsense, and we don’t
want to corrupt our internal data model or crash when bad requests
come in.
If the data looks valid, the handler stores an object that represents
the new talk in the talks object, possibly overwriting an existing talk
with this title, and again calls updated.
Adding a comment to a talk works similarly. We use readStream to
get the content of the request, validate the resulting data, and store it
as a comment when it looks valid.
Trying to add a comment to a nonexistent talk returns a 404 error.
The most interesting aspect of the server is the part that handles long
polling. When a GET request comes in for /talks, it may be either a
regular request or a long polling request.
There will be multiple places in which we have to send an array of
talks to the client, so we first define a helper method that builds up
such an array and includes an ETag header in the response.
The handler itself needs to look at the request headers to see whether
If-None-Match and Prefer headers are present. Node stores headers,
whose names are specified to be case insensitive, under their lowercase
names.
If no tag was given or a tag was given that doesn’t match the server’s
current version, the handler responds with the list of talks. If the
request is conditional and the talks did not change, we consult the
Prefer header to see whether we should delay the response or respond
right away.
Callback functions for delayed requests are stored in the server’s
waiting array so that they can be notified when something happens.
The waitForChanges method also immediately sets a timer to respond
with a 304 status when the request has waited long enough.
Registering a change with updated increases the version property and
wakes up all waiting requests.

The client
The client-side part of the skill-sharing website consists of three files: a
tiny HTML page, a style sheet, and a JavaScript file.

HTML
It is a widely used convention for web servers to try to serve a file named
index.html when a request is made directly to a path that corresponds
to a directory. The file server module we use, ecstatic, supports this
convention. When a request is made to the path /, the server looks for
the file ./public/index.html (./public being the root we gave it) and
returns that file if found.
Thus, if we want a page to show up when a browser is pointed at our
server, we should put it in public/index.html.
It defines the document title and includes a style sheet, which defines
a few styles to, among other things, make sure there is some space
between talks.
At the bottom, it adds a heading at the top of the page and loads
the script that contains the client-side application.

The JS
The application state consists of the list of talks and the name of the
user, and we’ll store it in a {talks, user} object. We don’t allow the
user interface to directly manipulate the state or send off HTTP requests. 
Rather, it may emit actions that describe what the user is
trying to do.
The handleAction function takes such an action and makes it happen.
Because our state updates are so simple, state changes are handled in
the same function.
We’ll store the user’s name in localStorage so that it can be restored
when the page is loaded.
The actions that need to involve the server make network requests,
using fetch, to the HTTP interface described earlier. We use a wrapper
function, fetchOK, which makes sure the returned promise is rejected
when the server returns an error code.
When the request fails, we don’t want to have our page just sit there,
doing nothing without explanation. So we define a function called
reportError, which at least shows the user a dialog that tells them
something went wrong.
The "submit" event handler calls form.reset to clear the form’s content 
after creating a "newComment" action.
When creating moderately complex pieces of DOM, this style of programming 
starts to look rather messy. There’s a widely used (nonstandard) JavaScript 
extension called JSX that lets you write HTML
directly in your scripts, which can make such code prettier (depending
on what you consider pretty). Before you can actually run such code,
you have to run a program on your script to convert the pseudo-HTML
into JavaScript function calls much like the ones we use here.
Comments are simpler to render.
To start the app we need the current list of talks. Since the initial load
is closely related to the long polling process—the ETag from the load
must be used when polling—we’ll write a function that keeps polling
the server for /talks and calls a callback function when a new set of
talks is available.
This is an async function so that looping and waiting for the request
is easier. It runs an infinite loop that, on each iteration, retrieves the
list of talks—either normally or, if this isn’t the first request, with the
headers included that make it a long polling request.
When a request fails, the function waits a moment and then tries
again. This way, if your network connection goes away for a while and
then comes back, the application can recover and continue updating.
The promise resolved via setTimeout is a way to force the async function
to wait.
When the server gives back a 304 response, that means a long polling
request timed out, so the function should just immediately start the
next request. If the response is a normal 200 response, its body is read
as JSON and passed to the callback, and its ETag header value is stored
for the next iteration.